/**
 * BUMBA Command Template Generator
 * Generates missing command templates with consistent structure
 */

const fs = require('fs');
const path = require('path');
const { logger } = require('../logging/bumba-logger');

class CommandTemplateGenerator {
  constructor() {
    this.templateDir = path.join(__dirname, '../../templates/commands');
    this.generatedCount = 0;
  }

  /**
   * Generate a command template
   */
  generateTemplate(commandName, config) {
    const template = this.createTemplateContent(commandName, config);
    const filePath = path.join(this.templateDir, `${commandName}.md`);
    
    // Check if template already exists
    if (fs.existsSync(filePath)) {
      logger.debug(`Template already exists: ${commandName}.md`);
      return false;
    }
    
    // Write template file
    fs.writeFileSync(filePath, template);
    this.generatedCount++;
    logger.info(`üèÅ Generated template: ${commandName}.md`);
    return true;
  }

  /**
   * Create template content based on command configuration
   */
  createTemplateContent(commandName, config) {
    const { description, category, primary_agent, routing } = config;
    const agent = primary_agent || this.getDefaultAgent(category);
    
    return `# /bumba:${commandName}

## Description
${description}

## Category
**${category}**

## Primary Agent
**${agent}**

## Usage
\`\`\`
/bumba:${commandName} [options]
\`\`\`

## Options
- \`--verbose\`: Enable detailed output
- \`--dry-run\`: Preview without making changes
- \`--force\`: Skip confirmation prompts

## Examples

### Basic Usage
\`\`\`
/bumba:${commandName}
\`\`\`

### Advanced Usage
\`\`\`
/bumba:${commandName} --verbose --dry-run
\`\`\`

## Workflow

1. **Analysis Phase**
   - Analyze current context
   - Identify requirements
   - Validate prerequisites

2. **Planning Phase**
   - Create execution plan
   - Identify dependencies
   - Estimate timeline

3. **Execution Phase**
   - Implement changes
   - Monitor progress
   - Handle errors

4. **Verification Phase**
   - Validate results
   - Run tests
   - Generate report

## Integration Points

${this.generateIntegrationPoints(category, primary_agent)}

## Success Criteria

- üèÅ All requirements met
- üèÅ Tests passing
- üèÅ Documentation updated
- üèÅ No regressions introduced

## Error Handling

Common errors and solutions:

1. **Missing Dependencies**
   - Solution: Install required packages
   
2. **Permission Denied**
   - Solution: Check file permissions
   
3. **Configuration Error**
   - Solution: Verify configuration settings

## Related Commands

${this.generateRelatedCommands(commandName, category)}

## Notes

- This command is part of the ${category} category
- Managed by ${agent}
${routing ? `- Uses ${routing} routing` : ''}

---
*Generated by BUMBA Template Generator*
`;
  }

  /**
   * Get default agent for category
   */
  getDefaultAgent(category) {
    const categoryAgentMap = {
      'strategy': 'Product-Strategist',
      'design': 'Design-Engineer',
      'development': 'Backend-Engineer',
      'technical': 'Backend-Engineer',
      'quality': 'QA-Specialist',
      'collaboration': 'Multi-Agent',
      'deployment': 'DevOps-Engineer'
    };
    
    return categoryAgentMap[category] || 'Auto-Router';
  }

  /**
   * Generate integration points based on category
   */
  generateIntegrationPoints(category, agent) {
    const integrations = {
      'strategy': `- Notion for documentation
- Airtable for tracking
- Sequential thinking MCP
- Memory MCP`,
      'design': `- Figma for design assets
- Magic UI for components
- Playwright for testing
- Context MCP`,
      'development': `- GitHub for version control
- Docker for containerization
- Database integrations
- Security scanning`,
      'technical': `- API development tools
- Performance monitoring
- Security validation
- Testing frameworks`,
      'quality': `- Test runners
- Coverage tools
- Validation frameworks
- CI/CD pipelines`
    };
    
    return integrations[category] || '- Standard framework integrations';
  }

  /**
   * Generate related commands
   */
  generateRelatedCommands(commandName, category) {
    const related = [];
    
    // Add category-specific related commands
    if (commandName.includes('analyze')) {
      related.push('- `/bumba:implement` - Implement based on analysis');
      related.push('- `/bumba:test` - Test the analyzed components');
    }
    
    if (commandName.includes('implement')) {
      related.push('- `/bumba:analyze` - Analyze before implementation');
      related.push('- `/bumba:validate` - Validate implementation');
    }
    
    if (commandName.includes('research')) {
      related.push('- `/bumba:docs` - Documentation lookup');
      related.push('- `/bumba:analyze` - Deep analysis');
    }
    
    if (commandName.includes('improve')) {
      related.push('- `/bumba:analyze` - Analyze improvement areas');
      related.push('- `/bumba:test` - Test improvements');
    }
    
    return related.join('\n') || '- See `/bumba:help` for all commands';
  }

  /**
   * Generate all missing templates
   */
  generateMissingTemplates() {
    const missingTemplates = {
      'analyze-business': {
        description: 'Product-Strategist business impact analysis',
        category: 'strategy',
        primary_agent: 'Product-Strategist'
      },
      'analyze-technical': {
        description: 'Backend-Engineer technical architecture analysis',
        category: 'development',
        primary_agent: 'Backend-Engineer'
      },
      'analyze-ux': {
        description: 'Design-Engineer UX/accessibility analysis',
        category: 'design',
        primary_agent: 'Design-Engineer'
      },
      'devops': {
        description: 'DevOps operations with Docker, Oracle, and DigitalOcean',
        category: 'backend',
        primary_agent: 'Backend-Engineer'
      },
      'docs-business': {
        description: 'Product-Strategist business documentation lookup',
        category: 'strategy',
        primary_agent: 'Product-Strategist'
      },
      'docs-design': {
        description: 'Design-Engineer design system documentation',
        category: 'design',
        primary_agent: 'Design-Engineer'
      },
      'docs-technical': {
        description: 'Backend-Engineer technical documentation',
        category: 'development',
        primary_agent: 'Backend-Engineer'
      },
      'handoff': {
        description: 'Enhanced agent handoff with rich context',
        category: 'communication',
        routing: 'context_preservation'
      },
      'implement-agents': {
        description: 'Multi-agent collaborative development',
        category: 'development',
        primary_agent: 'Multi-Agent'
      },
      'implement-design': {
        description: 'Design-Engineer optimized implementation',
        category: 'design',
        primary_agent: 'Design-Engineer'
      },
      'implement-strategy': {
        description: 'Product-Strategist optimized implementation',
        category: 'strategy',
        primary_agent: 'Product-Strategist'
      },
      'implement-technical': {
        description: 'Backend-Engineer optimized implementation',
        category: 'development',
        primary_agent: 'Backend-Engineer'
      },
      'improve-design': {
        description: 'Design-Engineer UX/UI optimization',
        category: 'design',
        primary_agent: 'Design-Engineer'
      },
      'improve-performance': {
        description: 'Backend-Engineer performance and scalability optimization',
        category: 'development',
        primary_agent: 'Backend-Engineer'
      },
      'improve-strategy': {
        description: 'Product-Strategist business strategy optimization',
        category: 'strategy',
        primary_agent: 'Product-Strategist'
      },
      'research-design': {
        description: 'Design-Engineer design patterns and UX research',
        category: 'design',
        primary_agent: 'Design-Engineer'
      },
      'research-market': {
        description: 'Product-Strategist market research and competitive analysis',
        category: 'strategy',
        primary_agent: 'Product-Strategist'
      },
      'research-technical': {
        description: 'Backend-Engineer technical architecture research',
        category: 'development',
        primary_agent: 'Backend-Engineer'
      },
      'test': {
        description: 'Intelligent testing with automatic agent routing',
        category: 'quality',
        routing: 'intelligent'
      },
      'urgent': {
        description: 'Emergency priority routing with conflict detection',
        category: 'communication',
        routing: 'priority_override'
      },
      'validate': {
        description: 'Comprehensive validation with scope-based routing',
        category: 'quality',
        routing: 'intelligent'
      }
    };
    
    // Ensure template directory exists
    if (!fs.existsSync(this.templateDir)) {
      fs.mkdirSync(this.templateDir, { recursive: true });
    }
    
    // Generate each missing template
    for (const [name, config] of Object.entries(missingTemplates)) {
      this.generateTemplate(name, config);
    }
    
    logger.info(`üìù Generated ${this.generatedCount} missing templates`);
    return this.generatedCount;
  }
}

// Export for use
module.exports = CommandTemplateGenerator;

// Run if executed directly
if (require.main === module) {
  const generator = new CommandTemplateGenerator();
  const count = generator.generateMissingTemplates();
  console.log(`üèÅ Successfully generated ${count} command templates`);
}