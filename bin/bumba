#!/usr/bin/env node

/**
 * BUMBA CLI - Hybrid Intelligence Framework
 * Bridge Mode: Terminal task preparation
 * Enhancement Mode: Claude AI execution
 */

const chalk = require('chalk');
const { program } = require('commander');
const path = require('path');
const fs = require('fs');

// Import hybrid mode components
const ModeManager = require('../src/core/hybrid/mode-manager');
const ConfigBridge = require('../src/core/hybrid/config-bridge');

// Version from package.json
const packageJson = require('../package.json');

// BUMBA brand colors
const yellow = chalk.hex('#FFD700');
const green = chalk.hex('#00FF00');
const red = chalk.hex('#FF0000');
const orange = chalk.hex('#FFA500');

// Check if first run (show installer experience)
// Show installer for: bumba (no args) or bumba welcome
if (process.argv.length === 2) {
  // Show installer then menu
  require('../scripts/post-install-display.js');
  // After installer, show the menu
  console.log('üèÅ BUMBA COMMAND MENU üèÅ');
  console.log(chalk.gray('‚îÅ'.repeat(60)));
  console.log();
  console.log('CORE COMMANDS:');
  console.log('  bumba menu              - Show this menu');
  console.log('  bumba implement <task>  - Build features with AI agents');
  console.log('  bumba analyze <type>    - Analyze codebase');
  console.log('  bumba help              - Get help');
  console.log();
  console.log('DEPARTMENT COMMANDS:');
  console.log('  ' + yellow('üü°') + ' bumba strategy <task>  - Product strategy planning');
  console.log('  ' + green('üü¢') + ' bumba backend <task>   - Backend development');
  console.log('  ' + red('üî¥') + ' bumba frontend <task>  - Frontend & UI development');
  console.log('  ' + orange('üü†') + ' bumba test <task>      - Testing & quality assurance');
  console.log();
  console.log('QUICK START:');
  console.log('  bumba init              - Initialize BUMBA in current project');
  console.log('  bumba status            - Check BUMBA status');
  console.log();
  console.log(chalk.gray('‚îÅ'.repeat(60)));
  console.log('Example: bumba implement "user authentication system"');
  process.exit(0);
} else if (process.argv[2] === 'welcome') {
  require('../scripts/post-install.js');
  process.exit(0);
}

// Initialize mode manager
const modeManager = new ModeManager();
const currentMode = modeManager.getModeType();

// Header with mode indicator
console.log();
console.log(green('üü¢') + ' BUMBA Framework v' + packageJson.version + ' [' + currentMode.toUpperCase() + ' MODE]');
console.log(chalk.gray('‚îÅ'.repeat(60)));
console.log();

// Configure program
program
  .version(packageJson.version)
  .description('BUMBA - AI Development Framework');

// Menu command - Show complete command library
program
  .command('menu')
  .description('Show complete BUMBA command library (60+ commands)')
  .action(() => {
    console.log();
    console.log('üèÅ BUMBA FRAMEWORK v3.0.4 - COMPLETE COMMAND LIBRARY (60+ Commands) üèÅ');
    console.log(chalk.gray('‚îÅ'.repeat(70)));
    console.log();
    
    console.log(chalk.green('üü¢ CORE IMPLEMENTATION COMMANDS:'));
    console.log('  /bumba:implement [feature]         - Auto-routing to best agent');
    console.log('  /bumba:implement-strategy [feat]   - Product-focused implementation');
    console.log('  /bumba:implement-design [feat]     - Design-focused implementation');
    console.log('  /bumba:implement-technical [feat]  - Backend-focused implementation');
    console.log('  /bumba:implement-agents [feat]     - Full team collaboration');
    console.log();
    
    console.log(chalk.yellow('üü° PRODUCT STRATEGY (Product-Strategist Manager):'));
    console.log('  /bumba:prd [action]                - Create comprehensive PRDs');
    console.log('  /bumba:requirements [scope]        - Discover requirements');
    console.log('  /bumba:roadmap [timeline]          - Strategic planning');
    console.log('  /bumba:research-market [topic]     - Market research');
    console.log('  /bumba:analyze-business [target]   - Business analysis');
    console.log('  /bumba:docs-business [query]       - Business documentation');
    console.log('  /bumba:improve-strategy [area]     - Strategy optimization');
    console.log('  /bumba:executive [initiative]      - CEO-level coordination');
    console.log('  /bumba:leadership [scope]          - Strategic leadership');
    console.log();
    
    console.log(chalk.magenta('üé® DESIGN & UX (Design-Engineer Manager):'));
    console.log('  /bumba:design [workflow]           - Design automation');
    console.log('  /bumba:figma [action]              - Figma Dev Mode integration');
    console.log('  /bumba:ui [component]              - UI component generation');
    console.log('  /bumba:visual [task]               - Visual asset optimization');
    console.log('  /bumba:research-design [topic]     - Design pattern research');
    console.log('  /bumba:analyze-ux [target]         - UX/accessibility analysis');
    console.log('  /bumba:docs-design [query]         - Design documentation');
    console.log('  /bumba:improve-design [area]       - UX/UI optimization');
    console.log('  /bumba:accessibility [scope]       - WCAG compliance validation');
    console.log();
    
    console.log(chalk.blue('üîß TECHNICAL/BACKEND (Backend-Engineer Manager):'));
    console.log('  /bumba:api [endpoint]              - API development');
    console.log('  /bumba:secure [scope]              - Security validation');
    console.log('  /bumba:scan [target]               - Security scanning');
    console.log('  /bumba:analyze [target]            - Code analysis');
    console.log('  /bumba:research-technical [topic]  - Technical research');
    console.log('  /bumba:docs-technical [query]      - Technical documentation');
    console.log('  /bumba:improve-performance [area]  - Performance optimization');
    console.log('  /bumba:database [action]           - Database management');
    console.log('  /bumba:devops [scope]              - DevOps & infrastructure');
    console.log('  /bumba:publish [package]           - Package publishing');
    console.log();
    
    console.log(chalk.cyan('ü§ù MULTI-AGENT COLLABORATION:'));
    console.log('  /bumba:team [action]               - Team coordination');
    console.log('  /bumba:collaborate [action]        - Multi-agent work');
    console.log('  /bumba:chain [commands]            - Command automation');
    console.log('  /bumba:workflow [type]             - Workflow automation');
    console.log('  /bumba:checkpoint [milestone]      - Milestone tracking');
    console.log();
    
    console.log(chalk.hex('#9B59B6')('‚ú® CONSCIOUSNESS-DRIVEN DEVELOPMENT:'));
    console.log('  /bumba:conscious analyze [target]  - Four Pillars analysis');
    console.log('  /bumba:conscious reason [problem]  - Wisdom reasoning');
    console.log('  /bumba:conscious wisdom [context]  - Contextual guidance');
    console.log('  /bumba:conscious purpose [project] - Purpose alignment');
    console.log('  /bumba:conscious implement [feat]  - Conscious implementation');
    console.log();
    
    console.log(chalk.red('üìä HEALTH & PERFORMANCE:'));
    console.log('  /bumba:status                      - System diagnostics');
    console.log('  /bumba:health                      - Health check w/ auto-repair');
    console.log('  /bumba:performance                 - Performance metrics');
    console.log('  /bumba:resources                   - Resource analytics');
    console.log('  /bumba:optimize                    - System optimization');
    console.log('  /bumba:mode [switch]               - Switch full/lite mode');
    console.log('  /bumba:benchmark                   - Performance benchmarking');
    console.log('  /bumba:monitor                     - Continuous monitoring');
    console.log();
    
    console.log(chalk.hex('#E67E22')('‚ö° LITE MODE (Ultra-minimal):'));
    console.log('  /bumba:lite [prompt]               - Auto-detect & develop');
    console.log('  /bumba:lite-analyze [target]       - Lightweight analysis');
    console.log('  /bumba:lite-implement [feature]    - Quick implementation');
    console.log('  /bumba:lite figma [url]            - Figma to code');
    console.log('  /bumba:lite executive              - CEO coordination');
    console.log('  /bumba:lite metrics                - Performance dashboard');
    console.log();
    
    console.log(chalk.hex('#3498DB')('üîç INTELLIGENCE & RESEARCH:'));
    console.log('  /bumba:docs [query]                - Smart documentation (60-95% fewer tokens)');
    console.log('  /bumba:research [topic]            - AI-optimized research');
    console.log('  /bumba:snippets [category]         - Code snippet management');
    console.log();
    
    console.log(chalk.hex('#E74C3C')('üîê QUALITY & SECURITY:'));
    console.log('  /bumba:test [scope]                - Intelligent testing');
    console.log('  /bumba:validate [target]           - Comprehensive validation');
    console.log('  /bumba:audit [system]              - Security audit');
    console.log('  /bumba:quality [scope]             - Quality assessment');
    console.log();
    
    console.log(chalk.hex('#2ECC71')('üåø GIT & COLLABORATION:'));
    console.log('  /bumba:commit [message]            - Intelligent commits');
    console.log('  /bumba:review [scope]              - Code review');
    console.log('  /bumba:branch [action]             - Branch management');
    console.log();
    
    console.log(chalk.gray('‚öôÔ∏è  SYSTEM & CONFIGURATION:'));
    console.log('  /bumba:menu                        - This complete reference');
    console.log('  /bumba:agents                      - Discover all agents');
    console.log('  /bumba:help [command]              - Command help');
    console.log('  /bumba:settings                    - Framework configuration');
    console.log('  /bumba:version                     - Version information');
    console.log();
    
    console.log(chalk.hex('#F39C12')('üéâ CEREMONIES:'));
    console.log('  /bumba:celebrate [milestone]       - Milestone celebration with audio');
    console.log('  /bumba:ceremony [type]             - Achievement ceremonies');
    console.log();
    
    console.log(chalk.gray('‚îÅ'.repeat(70)));
    console.log(chalk.green.bold('Total: 60+ comprehensive commands across all territories'));
    console.log();
    console.log(chalk.yellow('üí° Tips:'));
    console.log(chalk.yellow('  ‚Ä¢ Use /bumba:help [command] for detailed usage and examples'));
    console.log(chalk.yellow('  ‚Ä¢ Commands work best within Claude interface'));
    console.log(chalk.yellow('  ‚Ä¢ Use /bumba:implement for auto-routing to best agent'));
    console.log(chalk.yellow('  ‚Ä¢ Try /bumba:agents to discover all available specialists'));
    console.log();
  });

// Implement command - Hybrid aware
program
  .command('implement <task>')
  .description('Build a feature using BUMBA agents')
  .action(async (task) => {
    if (currentMode === 'terminal') {
      // Bridge mode - prepare task
      await modeManager.execute('prepare', task);
    } else if (currentMode === 'claude') {
      // Enhancement mode - direct implementation
      await modeManager.execute('implement', task);
    } else {
      // Hybrid mode
      console.log('üèÅ BUMBA Hybrid Implementation');
      console.log(chalk.gray('‚îÅ'.repeat(60)));
      console.log();
      console.log('Preparing task for execution...');
      await modeManager.execute('prepare', task);
    }
  });

// Backend command
program
  .command('backend <task>')
  .description('Backend development with BUMBA')
  .action((task) => {
    console.log(green('üü¢ BUMBA Backend Engineering'));
    console.log(chalk.gray('‚îÅ'.repeat(60)));
    console.log();
    console.log('Task: ' + task);
    console.log();
    console.log('Backend components to create:');
    console.log('  ‚Ä¢ API endpoints');
    console.log('  ‚Ä¢ Database models');
    console.log('  ‚Ä¢ Business logic');
    console.log('  ‚Ä¢ Authentication');
    console.log('  ‚Ä¢ Validation');
    console.log();
    console.log('Use in Claude Code for full implementation.');
  });

// Frontend command
program
  .command('frontend <task>')
  .description('Frontend development with BUMBA')
  .action((task) => {
    console.log(red('üî¥ BUMBA Design Engineering'));
    console.log(chalk.gray('‚îÅ'.repeat(60)));
    console.log();
    console.log('Task: ' + task);
    console.log();
    console.log('Frontend components to create:');
    console.log('  ‚Ä¢ React/Vue/Angular components');
    console.log('  ‚Ä¢ Responsive layouts');
    console.log('  ‚Ä¢ User interactions');
    console.log('  ‚Ä¢ State management');
    console.log('  ‚Ä¢ API integration');
    console.log();
    console.log('Use in Claude Code for full implementation.');
  });

// Strategy command
program
  .command('strategy <task>')
  .description('Product strategy planning')
  .action((task) => {
    console.log(yellow('üü° BUMBA Product Strategy'));
    console.log(chalk.gray('‚îÅ'.repeat(60)));
    console.log();
    console.log('Planning: ' + task);
    console.log();
    console.log('Strategy components:');
    console.log('  ‚Ä¢ Requirements analysis');
    console.log('  ‚Ä¢ Architecture design');
    console.log('  ‚Ä¢ Technology selection');
    console.log('  ‚Ä¢ Roadmap planning');
    console.log('  ‚Ä¢ Risk assessment');
    console.log();
    console.log('Use in Claude Code for full implementation.');
  });

// Test command
program
  .command('test <task>')
  .description('Testing and QA with BUMBA')
  .action((task) => {
    console.log(orange('üü† BUMBA Quality Assurance'));
    console.log(chalk.gray('‚îÅ'.repeat(60)));
    console.log();
    console.log('Testing: ' + task);
    console.log();
    console.log('Test components:');
    console.log('  ‚Ä¢ Unit tests');
    console.log('  ‚Ä¢ Integration tests');
    console.log('  ‚Ä¢ E2E tests');
    console.log('  ‚Ä¢ Performance tests');
    console.log('  ‚Ä¢ Security validation');
    console.log();
    console.log('Use in Claude Code for full implementation.');
  });

// Removed duplicate analyze command - handled by hybrid mode above

// Init command
program
  .command('init')
  .description('Initialize BUMBA in current project')
  .action(() => {
    console.log('üèÅ Initializing BUMBA Framework');
    console.log(chalk.gray('‚îÅ'.repeat(60)));
    console.log();
    
    const configPath = path.join(process.cwd(), 'bumba.config.js');
    
    if (fs.existsSync(configPath)) {
      console.log(chalk.yellow('‚ö†Ô∏è  BUMBA already initialized in this project'));
    } else {
      // Create config file
      const config = `/**
 * BUMBA Framework Configuration
 * Generated: ${new Date().toISOString()}
 */

module.exports = {
  version: '${packageJson.version}',
  project: '${path.basename(process.cwd())}',
  departments: {
    strategy: { enabled: true, emoji: 'üü°' },
    backend: { enabled: true, emoji: 'üü¢' },
    frontend: { enabled: true, emoji: 'üî¥' },
    testing: { enabled: true, emoji: 'üü†' }
  },
  features: {
    parallelExecution: true,
    autoTesting: true,
    qualityGates: true
  }
};
`;
      fs.writeFileSync(configPath, config);
      console.log('‚úÖ Created bumba.config.js');
      console.log();
      console.log('üèÅ BUMBA initialized successfully!');
      console.log();
      console.log('Next steps:');
      console.log('1. Run: bumba menu');
      console.log('2. Try: bumba implement "your first feature"');
    }
  });

// Prepare command (Bridge mode)
program
  .command('prepare <description>')
  .description('Prepare a task for Claude execution')
  .action(async (description) => {
    if (!modeManager.hasCapability('taskPreparation')) {
      console.log('üî¥ Task preparation not available in ' + currentMode + ' mode');
      return;
    }
    await modeManager.execute('prepare', description);
  });

// Execute command (Enhancement mode)
program
  .command('execute <taskId>')
  .description('Execute a prepared task (Claude mode)')
  .action(async (taskId) => {
    if (!modeManager.hasCapability('ai')) {
      console.log('üî¥ Task execution requires Claude environment');
      console.log('Please run this command in Claude Code');
      return;
    }
    await modeManager.execute('execute', taskId);
  });

// Analyze command (Bridge mode)
program
  .command('analyze [type]')
  .description('Analyze project and gather context')
  .action(async (type = 'project') => {
    await modeManager.execute('analyze', type);
  });

// Vision command (Enhancement mode)
program
  .command('vision <imagePath>')
  .description('Analyze image/screenshot with vision')
  .action(async (imagePath) => {
    if (!modeManager.hasCapability('vision')) {
      console.log('üî¥ Vision analysis requires Claude environment');
      return;
    }
    await modeManager.execute('vision', imagePath);
  });

// Status command - Enhanced
program
  .command('status')
  .description('Check BUMBA status and mode')
  .action(() => {
    modeManager.displayStatus();
    console.log('üèÅ BUMBA Status');
    console.log(chalk.gray('‚îÅ'.repeat(60)));
    console.log();
    console.log('Version: ' + packageJson.version);
    console.log('Location: ' + __dirname);
    console.log('Working Directory: ' + process.cwd());
    console.log();
    
    const configPath = path.join(process.cwd(), 'bumba.config.js');
    if (fs.existsSync(configPath)) {
      console.log('‚úÖ BUMBA initialized in this project');
      const config = require(configPath);
      console.log('Project: ' + config.project);
    } else {
      console.log('‚ö†Ô∏è  BUMBA not initialized in this project');
      console.log('Run: bumba init');
    }
    console.log();
    console.log('Departments:');
    console.log('  üü° ProductStrategist: Active');
    console.log('  üü¢ BackendEngineer: Active');
    console.log('  üî¥ DesignEngineer: Active');
    console.log('  üü† QualityAssurance: Active');
  });

// Help command (default)
program
  .command('help', { isDefault: true })
  .description('Show help information')
  .action(() => {
    program.outputHelp();
    console.log();
    console.log('Examples:');
    console.log('  bumba menu');
    console.log('  bumba implement "user authentication"');
    console.log('  bumba backend "REST API"');
    console.log('  bumba frontend "dashboard UI"');
    console.log('  bumba test "unit tests"');
    console.log();
    console.log('For AI-powered implementation, use BUMBA within Claude Code at claude.ai');
  });

// Parse arguments
program.parse(process.argv);